{"ast":null,"code":"import { API_BASE_URL } from '../config.ts';\nexport const collationService = {\n  async collateManuscripts() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/collate/`);\n      if (!response.ok) {\n        throw new Error('Failed to collate manuscripts');\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error('Error during collation: ' + (error instanceof Error ? error.message : 'Unknown error'));\n    }\n  },\n  async saveComparison(data) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/comparisons/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to save comparison');\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error('Error saving comparison: ' + (error instanceof Error ? error.message : 'Unknown error'));\n    }\n  },\n  async getVerses(manuscriptId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/verses/${manuscriptId}/`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch verses');\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error('Error fetching verses: ' + (error instanceof Error ? error.message : 'Unknown error'));\n    }\n  },\n  async getVerse(manuscriptId, verseNumber) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/verses/${manuscriptId}/${verseNumber}/`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch verse');\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error('Error fetching verse: ' + (error instanceof Error ? error.message : 'Unknown error'));\n    }\n  },\n  async getPhylogeneticTree(format = 'base64') {\n    try {\n      const response = await fetch(`${API_BASE_URL}/generate_phylogenetic_tree/?format2=${format}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch phylogenetic tree');\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error('Error fetching phylogenetic tree: ' + (error instanceof Error ? error.message : 'Unknown error'));\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","collationService","collateManuscripts","response","fetch","ok","Error","json","error","message","saveComparison","data","method","headers","body","JSON","stringify","getVerses","manuscriptId","getVerse","verseNumber","getPhylogeneticTree","format"],"sources":["/Users/brycemolnar/Documents/bbbbbb/CS-410-Senior-Project-Editing-Tool/frontend/src/services/collationService.ts"],"sourcesContent":["import { API_BASE_URL } from '../config.ts';\n\ninterface CollationResult {\n  differences: {\n    [verseNumber: string]: {\n      witnesses: string[];\n      table: any[][];\n    };\n  };\n}\n\ninterface WordComparison {\n  verseNumber: number;\n  word1: string;\n  word2: string;\n  position: number;\n  manuscriptSigla: string;\n}\n\ninterface ComparisonResult {\n  comparisonId: string;\n  isSignificant: boolean;\n  variationType: string;\n  wordComparison: WordComparison;\n  timestamp: string;\n}\n\nexport const collationService = {\n  async collateManuscripts(): Promise<CollationResult> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/collate/`);\n      if (!response.ok) {\n        throw new Error('Failed to collate manuscripts');\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error('Error during collation: ' + (error instanceof Error ? error.message : 'Unknown error'));\n    }\n  },\n\n  async saveComparison(data: {\n    wordComparison: WordComparison;\n    isSignificant: boolean;\n    variationType: string;\n  }): Promise<ComparisonResult> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/comparisons/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to save comparison');\n      }\n\n      return await response.json();\n    } catch (error) {\n      throw new Error('Error saving comparison: ' + (error instanceof Error ? error.message : 'Unknown error'));\n    }\n  },\n\n  async getVerses(manuscriptId: string) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/verses/${manuscriptId}/`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch verses');\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error('Error fetching verses: ' + (error instanceof Error ? error.message : 'Unknown error'));\n    }\n  },\n\n  async getVerse(manuscriptId: string, verseNumber: string) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/verses/${manuscriptId}/${verseNumber}/`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch verse');\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error('Error fetching verse: ' + (error instanceof Error ? error.message : 'Unknown error'));\n    }\n  },\n\n  async getPhylogeneticTree(format: 'base64' | 'newick' = 'base64'): Promise<{ tree_image?: string; newick_tree?: string; manuscript_count: number }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/generate_phylogenetic_tree/?format2=${format}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch phylogenetic tree');\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error('Error fetching phylogenetic tree: ' + (error instanceof Error ? error.message : 'Unknown error'));\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}