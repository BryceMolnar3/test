{"ast":null,"code":"var _jsxFileName = \"/Users/brycemolnar/Documents/bbbbbb/CS-410-Senior-Project-Editing-Tool/frontend/src/contexts/DisplaySettingsContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useColorMode } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DisplaySettingsContext = /*#__PURE__*/createContext(undefined);\nexport function DisplaySettingsProvider({\n  children\n}) {\n  _s();\n  const {\n    colorMode,\n    setColorMode\n  } = useColorMode();\n  const [settings, setSettings] = useState({\n    theme: 'light',\n    fontSize: 'medium'\n  });\n  useEffect(() => {\n    // Load settings from localStorage on mount\n    const savedSettings = localStorage.getItem('displaySettings');\n    if (savedSettings) {\n      try {\n        const parsed = JSON.parse(savedSettings);\n        setSettings(parsed);\n        applySettings(parsed);\n      } catch (error) {\n        console.error('Error parsing saved settings:', error);\n      }\n    }\n  }, []);\n\n  // Sync Chakra color mode with our theme setting\n  useEffect(() => {\n    setColorMode(settings.theme);\n  }, [settings.theme, setColorMode]);\n  const applySettings = newSettings => {\n    // Apply font size\n    if (newSettings.fontSize) {\n      document.documentElement.style.fontSize = {\n        small: '14px',\n        medium: '16px',\n        large: '18px'\n      }[newSettings.fontSize];\n    }\n  };\n  const updateSettings = newSettings => {\n    const updatedSettings = {\n      ...settings,\n      ...newSettings\n    };\n    setSettings(updatedSettings);\n    applySettings(newSettings);\n    localStorage.setItem('displaySettings', JSON.stringify(updatedSettings));\n  };\n  return /*#__PURE__*/_jsxDEV(DisplaySettingsContext.Provider, {\n    value: {\n      settings,\n      updateSettings\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(DisplaySettingsProvider, \"FqsagZ3HW+/mk/h6t432BFiU+GM=\", false, function () {\n  return [useColorMode];\n});\n_c = DisplaySettingsProvider;\nexport function useDisplaySettings() {\n  _s2();\n  const context = useContext(DisplaySettingsContext);\n  if (context === undefined) {\n    throw new Error('useDisplaySettings must be used within a DisplaySettingsProvider');\n  }\n  return context;\n}\n_s2(useDisplaySettings, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"DisplaySettingsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useColorMode","jsxDEV","_jsxDEV","DisplaySettingsContext","undefined","DisplaySettingsProvider","children","_s","colorMode","setColorMode","settings","setSettings","theme","fontSize","savedSettings","localStorage","getItem","parsed","JSON","parse","applySettings","error","console","newSettings","document","documentElement","style","small","medium","large","updateSettings","updatedSettings","setItem","stringify","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useDisplaySettings","_s2","context","Error","$RefreshReg$"],"sources":["/Users/brycemolnar/Documents/bbbbbb/CS-410-Senior-Project-Editing-Tool/frontend/src/contexts/DisplaySettingsContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useColorMode } from '@chakra-ui/react';\n\ninterface DisplaySettings {\n  theme: 'light' | 'dark';\n  fontSize: 'small' | 'medium' | 'large';\n}\n\ninterface DisplaySettingsContextType {\n  settings: DisplaySettings;\n  updateSettings: (newSettings: Partial<DisplaySettings>) => void;\n}\n\nconst DisplaySettingsContext = createContext<DisplaySettingsContextType | undefined>(undefined);\n\nexport function DisplaySettingsProvider({ children }: { children: React.ReactNode }) {\n  const { colorMode, setColorMode } = useColorMode();\n  const [settings, setSettings] = useState<DisplaySettings>({\n    theme: 'light',\n    fontSize: 'medium',\n  });\n\n  useEffect(() => {\n    // Load settings from localStorage on mount\n    const savedSettings = localStorage.getItem('displaySettings');\n    if (savedSettings) {\n      try {\n        const parsed = JSON.parse(savedSettings);\n        setSettings(parsed);\n        applySettings(parsed);\n      } catch (error) {\n        console.error('Error parsing saved settings:', error);\n      }\n    }\n  }, []);\n\n  // Sync Chakra color mode with our theme setting\n  useEffect(() => {\n    setColorMode(settings.theme);\n  }, [settings.theme, setColorMode]);\n\n  const applySettings = (newSettings: Partial<DisplaySettings>) => {\n    // Apply font size\n    if (newSettings.fontSize) {\n      document.documentElement.style.fontSize = {\n        small: '14px',\n        medium: '16px',\n        large: '18px'\n      }[newSettings.fontSize];\n    }\n  };\n\n  const updateSettings = (newSettings: Partial<DisplaySettings>) => {\n    const updatedSettings = { ...settings, ...newSettings };\n    setSettings(updatedSettings);\n    applySettings(newSettings);\n    localStorage.setItem('displaySettings', JSON.stringify(updatedSettings));\n  };\n\n  return (\n    <DisplaySettingsContext.Provider value={{ settings, updateSettings }}>\n      {children}\n    </DisplaySettingsContext.Provider>\n  );\n}\n\nexport function useDisplaySettings() {\n  const context = useContext(DisplaySettingsContext);\n  if (context === undefined) {\n    throw new Error('useDisplaySettings must be used within a DisplaySettingsProvider');\n  }\n  return context;\n} "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,YAAY,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAYhD,MAAMC,sBAAsB,gBAAGP,aAAa,CAAyCQ,SAAS,CAAC;AAE/F,OAAO,SAASC,uBAAuBA,CAAC;EAAEC;AAAwC,CAAC,EAAE;EAAAC,EAAA;EACnF,MAAM;IAAEC,SAAS;IAAEC;EAAa,CAAC,GAAGT,YAAY,CAAC,CAAC;EAClD,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAkB;IACxDc,KAAK,EAAE,OAAO;IACdC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEFd,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IAC7D,IAAIF,aAAa,EAAE;MACjB,IAAI;QACF,MAAMG,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACL,aAAa,CAAC;QACxCH,WAAW,CAACM,MAAM,CAAC;QACnBG,aAAa,CAACH,MAAM,CAAC;MACvB,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAtB,SAAS,CAAC,MAAM;IACdU,YAAY,CAACC,QAAQ,CAACE,KAAK,CAAC;EAC9B,CAAC,EAAE,CAACF,QAAQ,CAACE,KAAK,EAAEH,YAAY,CAAC,CAAC;EAElC,MAAMW,aAAa,GAAIG,WAAqC,IAAK;IAC/D;IACA,IAAIA,WAAW,CAACV,QAAQ,EAAE;MACxBW,QAAQ,CAACC,eAAe,CAACC,KAAK,CAACb,QAAQ,GAAG;QACxCc,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE,MAAM;QACdC,KAAK,EAAE;MACT,CAAC,CAACN,WAAW,CAACV,QAAQ,CAAC;IACzB;EACF,CAAC;EAED,MAAMiB,cAAc,GAAIP,WAAqC,IAAK;IAChE,MAAMQ,eAAe,GAAG;MAAE,GAAGrB,QAAQ;MAAE,GAAGa;IAAY,CAAC;IACvDZ,WAAW,CAACoB,eAAe,CAAC;IAC5BX,aAAa,CAACG,WAAW,CAAC;IAC1BR,YAAY,CAACiB,OAAO,CAAC,iBAAiB,EAAEd,IAAI,CAACe,SAAS,CAACF,eAAe,CAAC,CAAC;EAC1E,CAAC;EAED,oBACE7B,OAAA,CAACC,sBAAsB,CAAC+B,QAAQ;IAACC,KAAK,EAAE;MAAEzB,QAAQ;MAAEoB;IAAe,CAAE;IAAAxB,QAAA,EAClEA;EAAQ;IAAA8B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACsB,CAAC;AAEtC;AAAChC,EAAA,CAjDeF,uBAAuB;EAAA,QACDL,YAAY;AAAA;AAAAwC,EAAA,GADlCnC,uBAAuB;AAmDvC,OAAO,SAASoC,kBAAkBA,CAAA,EAAG;EAAAC,GAAA;EACnC,MAAMC,OAAO,GAAG9C,UAAU,CAACM,sBAAsB,CAAC;EAClD,IAAIwC,OAAO,KAAKvC,SAAS,EAAE;IACzB,MAAM,IAAIwC,KAAK,CAAC,kEAAkE,CAAC;EACrF;EACA,OAAOD,OAAO;AAChB;AAACD,GAAA,CANeD,kBAAkB;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}